#include <iostream>
#include <exception>
#include <stdexcept>

using std::endl;
using std::cout;
using std::exception;
using std::runtime_error;

/*
* exceptions are a mechanism to handle exceptional circumstances in programs by
* transferring control to a handler
*
* an exception is generated by the throw() expression, which accepts an argument
* to be passed to the handler
*
* a handler is used only if its parameter matches the type used by the throw
*/
class MyException: public exception
{
  // all exceptions unexpected
  virtual const char* what() const throw()
  {
    return "MyException occurred";
  }
};

int main()
{

  /*
  * runtime error occur due to events beyond the scope of the program and can't
  * be easily predicted
  */
  try
  {
    throw runtime_error("A runtime error occured!");
  }
  catch(const runtime_error &e)
  {
    cout << "Caught a runtime error." << endl;
  }

  /*
  * exception is the base class of the exception hierarchy in c++, it contains
  * a method what() which returns a c string describing he exception
  * in the exception tree, there are two main subtrees, runtime_error and
  * logic_error
  */
  try
  {
    throw MyException();
  }
  catch(exception& e)
  {
    cout << e.what() << endl;
  }

  /*
  * The class logic_error defines the type of objects thrown as exceptions to
  * report errors presumably detectable before the program executes, such as
  * violations of logical preconditions or class invariants.
  */
}
